@page "/tool"
@using Syncfusion.Blazor.PivotView

@using Syncfusion.Blazor
@using EFGrid.Functions
@inject NavigationManager NavigationManager
<div class="control-section">
    <div class="content-wrapper">
        <SfPivotView @ref="@pivot" TValue="PivotProductDetails" Height="500" Width="1000" ShowFieldList=true ShowToolbar=true ShowGroupingBar=true Toolbar="@pivotToolbar" AllowNumberFormatting=true AllowConditionalFormatting=true AllowCalculatedField=true AllowPdfExport=true AllowExcelExport=true EnableValueSorting=true ShowTooltip=false>
            <PivotViewDisplayOption Primary="Primary.Table" View="View.Both"></PivotViewDisplayOption>
            <PivotViewDataSourceSettings DataSource="@Data" ExpandAll=true EnableSorting=true ShowGrandTotals=true ShowSubTotals=true>
                <PivotViewColumns>
                    <PivotViewColumn Name="Year"></PivotViewColumn>
                    <PivotViewColumn Name="Order_Source" Caption="Order Source"></PivotViewColumn>
                </PivotViewColumns>
                <PivotViewRows>
                    <PivotViewRow Name="Country"></PivotViewRow>
                    <PivotViewRow Name="Products"></PivotViewRow>
                </PivotViewRows>
                <PivotViewValues>
                    <PivotViewValue Name="In_Stock" Caption="In Stock"></PivotViewValue>
                    <PivotViewValue Name="Sold" Caption="Units Sold"></PivotViewValue>
                    <PivotViewValue Name="Amount" Caption="Sold Amount"></PivotViewValue>
                </PivotViewValues>
                <PivotViewFilters>
                    <PivotViewFilter Name="Product_Categories" Caption="Product Categories"></PivotViewFilter>
                </PivotViewFilters>
                <PivotViewFormatSettings>
                    <PivotViewFormatSetting Name="Amount" Format="C0" UseGrouping=true></PivotViewFormatSetting>
                </PivotViewFormatSettings>
            </PivotViewDataSourceSettings>
            <PivotChartSettings Title="Sales Analysis" Theme="@Theme">
                <PivotChartPrimaryYAxis>
                    <PivotChartPrimaryYAxisBorder Width="0"></PivotChartPrimaryYAxisBorder>
                </PivotChartPrimaryYAxis>
            </PivotChartSettings>
            <PivotViewGridSettings ColumnWidth="120"></PivotViewGridSettings>
            <PivotViewEvents TValue="PivotProductDetails" RenameReport="RenameReport" RemoveReport="RemoveReport" SaveReport="SaveReport" LoadReport="LoadReport" FetchReport="FetchReport"></PivotViewEvents>
        </SfPivotView>
    </div>
</div>
<style>
    .e-pivotview {
        min-height: 200px;
    }
    html, body {
        height: 100%;
    }
</style>
@code{
    private SfPivotView<PivotProductDetails> pivot;
    private readonly List<ToolbarItems> pivotToolbar = new()
    {
        ToolbarItems.New,
        ToolbarItems.Save,
        ToolbarItems.SaveAs,
        ToolbarItems.Rename,
        ToolbarItems.Remove,
        ToolbarItems.Load,
        ToolbarItems.Grid,
        ToolbarItems.Chart,
        ToolbarItems.Export,
        ToolbarItems.SubTotal,
        ToolbarItems.GrandTotal,
        ToolbarItems.Formatting,
        ToolbarItems.FieldList
    };
    
    private Theme Theme { get; set; }
    private List<PivotProductDetails> Data { get; set; }
    private readonly Dictionary<string, string> reportNameToReport = new();
    
    protected override void OnInitialized()
    {
        Theme = Theme.Bootstrap5;
        this.Data = PivotProductDetails.GetProductData();
    }

    private void SaveReport(SaveReportArgs args)
    {
        reportNameToReport[args.ReportName] = args.Report;
    }

    private void FetchReport(FetchReportArgs args)
    {
        args.ReportName = reportNameToReport.Keys.ToArray();
    }

    private async Task LoadReport(LoadReportArgs args)
    {
        var rpt = reportNameToReport[args.ReportName];
        await this.pivot.LoadPersistDataAsync(rpt);
    }
    
    private async Task RemoveReport(RemoveReportArgs args)
    {
        reportNameToReport.Remove(args.ReportName);
        if (reportNameToReport.Count > 0)
        {
            var firstRpt = reportNameToReport.First().Value;
            await this.pivot.LoadPersistDataAsync(firstRpt);
        }
    }
    
    private void RenameReport(RenameReportArgs args)
    {
        var oldName = args.ReportName;
        if (args.IsReportExists)
        {
            var rpt = reportNameToReport[oldName];
            reportNameToReport.Remove(oldName);
            reportNameToReport[args.Rename] = rpt;
        }
    }
}