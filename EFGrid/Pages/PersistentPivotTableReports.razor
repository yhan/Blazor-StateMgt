@page "/persitent_reports"
@page "/persitent_reports/{ChosenDate}"

@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor
@using EFGrid.Functions
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Globalization


@inject ProtectedSessionStorage protectedSessionStore
@inject FakeDB fakeDb

<p> TransportDate is: @ChosenDate</p>

<div class="control-section">
    <div class="content-wrapper">
        <SfPivotView ID="EnablePersistenceTest" @ref="@pivot" TValue="PivotProductDetails" Height="500" Width="1000" ShowFieldList=true ShowToolbar=true ShowGroupingBar=true Toolbar="@pivotToolbar"
                     AllowNumberFormatting=true AllowConditionalFormatting=true AllowCalculatedField=true AllowPdfExport=true
                     AllowExcelExport=true EnableValueSorting=true ShowTooltip=false
                     EnableSorting=true
                     EnablePersistence="true">
            
            <PivotViewDisplayOption Primary="Primary.Table" View="View.Both"></PivotViewDisplayOption>
            <PivotViewDataSourceSettings DataSource="@Data" ExpandAll=true EnableSorting=true ShowGrandTotals=true ShowSubTotals=true>
                @* <PivotViewColumns> *@
                @*     <PivotViewColumn Name="Year"></PivotViewColumn> *@
                @*     <PivotViewColumn Name="Order_Source" Caption="Order Source"></PivotViewColumn> *@
                @* </PivotViewColumns> *@
                <PivotViewRows>
                    <PivotViewRow Name="@nameof(PivotProductDetails.Date)"></PivotViewRow>
                </PivotViewRows>
                <PivotViewValues>
                    <PivotViewValue Name="In_Stock" Caption="In Stock"></PivotViewValue>
                    <PivotViewValue Name="Sold" Caption="Units Sold"></PivotViewValue>
                    <PivotViewValue Name="Amount" Caption="Sold Amount"></PivotViewValue>
                </PivotViewValues>
                <PivotViewFilters>
                    <PivotViewFilter Name="Product_Categories" Caption="Product Categories"></PivotViewFilter>
                </PivotViewFilters>
                <PivotViewFormatSettings>
                    <PivotViewFormatSetting Name="Amount" Format="C0" UseGrouping=true></PivotViewFormatSetting>
                </PivotViewFormatSettings>
            </PivotViewDataSourceSettings>
            <PivotChartSettings Title="Sales Analysis" Theme="@Theme">
                <PivotChartPrimaryYAxis>
                    <PivotChartPrimaryYAxisBorder Width="0"></PivotChartPrimaryYAxisBorder>
                </PivotChartPrimaryYAxis>
            </PivotChartSettings>
            <PivotViewGridSettings ColumnWidth="120"></PivotViewGridSettings>
            <PivotViewEvents TValue="PivotProductDetails" RenameReport="RenameReport" RemoveReport="RemoveReport" SaveReport="SaveReport" LoadReport="LoadReport" FetchReport="FetchReport"></PivotViewEvents>
        </SfPivotView>
    </div>
</div>
<style>
    .e-pivotview {
        min-height: 200px;
    }
    html, body {
        height: 100%;
    }
</style>
@code{

    [Parameter] [SupplyParameterFromQuery]
    public string ChosenDate
    {
        get => chosenDate;
        set
        {
            if(value == chosenDate)
                return;
            
            chosenDate = value;
            if (!string.IsNullOrWhiteSpace(this.ChosenDate) && this.Data!=null)
            {
                var filter = DateOnly.Parse(this.ChosenDate, CultureInfo.InvariantCulture);
                this.Data = this.Data.FilterByDate(filter);
            }
        }
    }

    private SfPivotView<PivotProductDetails> pivot;
    private readonly List<ToolbarItems> pivotToolbar = new()
    {
        ToolbarItems.New,
        ToolbarItems.Save,
        ToolbarItems.SaveAs,
        ToolbarItems.Rename,
        ToolbarItems.Remove,
        ToolbarItems.Load,
        ToolbarItems.Grid,
        ToolbarItems.Chart,
        ToolbarItems.Export,
        ToolbarItems.SubTotal,
        ToolbarItems.GrandTotal,
        ToolbarItems.Formatting,
        ToolbarItems.FieldList
    };
    private string chosenDate;

    private Theme Theme { get; set; }
    private List<PivotProductDetails> Data { get; set; }
    protected override void OnInitialized()
    {
        Theme = Theme.Bootstrap5;
        var data = PivotProductDetails.GetProductData();
        
        if(!string.IsNullOrWhiteSpace(this.ChosenDate))
        {
            var filter = DateOnly.Parse(this.ChosenDate, CultureInfo.InvariantCulture);
            data = data.FilterByDate(filter);
        }

        this.Data = data;
    }

    private async Task SaveReport(SaveReportArgs args)
    {
        fakeDb.SaveReport(args.ReportName, args.Report);
    }

    private void FetchReport(FetchReportArgs args)
    {
        args.ReportName = fakeDb.FetchReport();
    }
    
    private async Task LoadReport(LoadReportArgs args)
    {
        var rptName = args.ReportName;
        var rpt = fakeDb.LoadReport(rptName);
        await this.pivot.LoadPersistDataAsync(rpt);

        await RememberLastReportName(args);
    }
    
    private async Task RemoveReport(RemoveReportArgs args)
    {
        var reportName = args.ReportName;
        var firstReport = fakeDb.RemoveThenReturnFirstReport(reportName);
        if (string.IsNullOrWhiteSpace(firstReport))
        {
            await this.pivot.LoadPersistDataAsync(firstReport);
        }
    }
    
    private void RenameReport(RenameReportArgs args)
    {
        var oldName = args.ReportName;
        var newRptName = args.Rename;
        
        if (!args.IsReportExists)
        {
            fakeDb.Rename(oldName, newRptName);
        }
    }

    #region Session State Management

    // Call this function to get last viewed report name
    private async Task<string> FetchLastReportName()
    {
        var result = await protectedSessionStore.GetAsync<string>("currenRptName");
        var currentRptName = result.Success ? result.Value : "Sample Report";
        return currentRptName;
    }

    private async Task RememberLastReportName(LoadReportArgs args)
        => await protectedSessionStore.SetAsync("currenRptName", args.ReportName);

    #endregion
}